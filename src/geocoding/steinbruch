

class Potential_Toponym_Entitiy(Base, Str):
    """
    PTEs are matches from the named entity ruler (spacy) that labels
    the text snippets of a report with the corresponding geoname. 

    ToDO: Instead of ADM4 units, use Lon/Lat?
    """
    __tablename__ = "potential_toponym_entities"

    id = Column(Integer, primary_key=True, autoincrement=True)
    report_id = Column(Integer, ForeignKey("reports.id"))
    list_of_adm4_codes = Column(Text)

    report = relationship("Report", back_populates="potential_toponym_entitiy")

    def __repr__(self) -> str:
        return f"PTE(report_id={self.report_id!r})"


    addresses: Mapped[List["Address"]] = relationship(
        back_populates="user", cascade="all, delete-orphan"
    )


class Address(Base):
    __tablename__ = "address"
    id: Mapped[int] = mapped_column(primary_key=True)
    email_address: Mapped[str]
    user_id: Mapped[int] = mapped_column(ForeignKey("user_account.id"))
    user: Mapped["User"] = relationship(back_populates="addresses")
    def __repr__(self) -> str:
        return f"Address(id={self.id!r}, email_address={self.email_address!r})"




from sqlalchemy import Column
from sqlalchemy import Date
from sqlalchemy import Integer
from sqlalchemy import Text, Numeric, Date
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from sqlalchemy import ForeignKey
from src.models import Report

from src.models.base import Base, Str


class Geoname(Base, Str):
    __tablename__ = "geonames"

    geonameid = Column(Integer, primary_key = True, autoincrement= False)
    name = Column(Text)
    asciiname = Column(Text)
    alternatenames = Column(Text)
    latitude = Column(Numeric)
    longitude = Column(Numeric) 
    feature_class = Column(Text)
    feature_code = Column(Text)
    country_code = Column(Text)
    cc2 = Column(Text)
    admin1_code = Column(Text)
    admin2_code = Column(Text)
    admin3_code = Column(Text)
    admin4_code = Column(Text)
    population = Column(Text)
    modification_date = Column(Date)



class Potential_Toponym_Entitiy(Base, Str):
    """
    PTEs are matches from the named entity ruler (spacy) that labels
    the text snippets of a report with the corresponding geoname. 

    ToDO: Instead of ADM4 units, use Lon/Lat?
    """
    __tablename__ = "potential_toponym_entities"

    id = Column(Integer, primary_key=True, autoincrement=True)
    report_id = Column(Integer, ForeignKey("reports.id"))
    list_of_adm4_codes = Column(Text)

    report = relationship("Report", back_populates="potential_toponym_entitiy")
